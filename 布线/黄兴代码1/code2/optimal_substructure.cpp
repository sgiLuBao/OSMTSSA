struct sub
{
	double pos;
	double s;
	double e;
}xsegment[10],ysegment[10],r_x[10],r_y[10];
bool con(struct sub a,struct sub b)
{
	if(a.pos<b.pos) return true;
	else if(a.pos==b.pos) return a.s<b.s;
	else return false;
}
void  optimal_substructure(int curt)
{
	int a,b,c,d,i;
	int p1,p2,p3,p4;
	int i1,i2,i3,i4;
	int n1,n2,n3,n4;
	double length,sha;
	opt_str[curt].num=curt;
	opt_str[curt].ll=999999999;
	if(terminal[curt].degree==2)
	{
       p1=terminal[curt].edge_pos[0]; 
	   p2=terminal[curt].edge_pos[1];
	   i1=edge[p1].index; 
	   i2=edge[p2].index;
	   for(a=0;a<4;a++)
	   {
		   if(records1[i1].c[a]!=0) continue;
		   for(b=0;b<4;b++)
		   {            
              if(records1[i2].c[b]!=0) continue;
			  n1=0;n2=0;n3=0;n4=0;
              if(records2[i1][a].mark[0]==true) 
			  {
                xsegment[n1].pos=records2[i1][a].posh;
			    xsegment[n1].s=records2[i1][a].sh;
			    xsegment[n1++].e=records2[i1][a].eh;
			  }
		      if(records2[i1][a].mark[1]==true) 
			  {
                ysegment[n2].pos=records2[i1][a].posv;
			    ysegment[n2].s=records2[i1][a].sv;
			    ysegment[n2++].e=records2[i1][a].ev;
			  }
		      if(records2[i1][a].mark[2]==true) 
			  {
                r_x[n3].pos=records2[i1][a].pos45;
			    r_x[n3].s=records2[i1][a].s45;
			    r_x[n3++].e=records2[i1][a].e45;
			  }
		      if(records2[i1][a].mark[3]==true) 
			  {
                r_y[n4].pos=records2[i1][a].pos135;
			    r_y[n4].s=records2[i1][a].s135;
			    r_y[n4++].e=records2[i1][a].e135;
			  }
			  if(records2[i2][b].mark[0]==true) 
			  {
                 xsegment[n1].pos=records2[i2][b].posh;
			     xsegment[n1].s=records2[i2][b].sh;
			     xsegment[n1++].e=records2[i2][b].eh;
			  }
		      if(records2[i2][b].mark[1]==true) 
			  {
                 ysegment[n2].pos=records2[i2][b].posv;
			     ysegment[n2].s=records2[i2][b].sv;
			     ysegment[n2++].e=records2[i2][b].ev;
			  }
		      if(records2[i2][b].mark[2]==true) 
			  { 
                 r_x[n3].pos=records2[i2][b].pos45;
			     r_x[n3].s=records2[i2][b].s45;
			     r_x[n3++].e=records2[i2][b].e45;
			  }
		      if(records2[i2][b].mark[3]==true)
			  { 
                 r_y[n4].pos=records2[i2][b].pos135;
			     r_y[n4].s=records2[i2][b].s135;
			     r_y[n4++].e=records2[i2][b].e135;
			  }
			  sort(xsegment,xsegment+n1,con);  
	          sort(ysegment,ysegment+n2,con);
	          sort(r_x,r_x+n3,con);
	          sort(r_y,r_y+n4,con);			
			  sha=0;
			  for(i=1;i<n1;i++) 
			  {
		          if(xsegment[i].pos==xsegment[i-1].pos)
			      if(xsegment[i].s==xsegment[i-1].s)
				  {
				     if(xsegment[i].e<xsegment[i-1].e)
					 {
						 sha+=(xsegment[i].e-xsegment[i].s);
						 xsegment[i].e=xsegment[i-1].e;
					 }
					 else sha+=(xsegment[i-1].e-xsegment[i-1].s);
				     xsegment[i-1].pos=0;
				     xsegment[i-1].s=0;
				     xsegment[i-1].e=0;
				  }
			      else 
				  {
				     if(xsegment[i].s<xsegment[i-1].e)
					 {				        
			   	        if(xsegment[i].e<xsegment[i-1].e)
						{
				  	       sha+=(xsegment[i].e-xsegment[i].s);
						   xsegment[i].e=xsegment[i-1].e;
						}
						else sha+=(xsegment[i-1].e-xsegment[i].s);
						xsegment[i].s=xsegment[i-1].s;
				        xsegment[i-1].pos=0;
			 	        xsegment[i-1].s=0;
				        xsegment[i-1].e=0;
					 }
				  }
			  }
			  for(i=1;i<n2;i++)
			  {
		         if(ysegment[i].pos==ysegment[i-1].pos)
			     if(ysegment[i].s==ysegment[i-1].s)
				 {
				    if(ysegment[i].e<ysegment[i-1].e)
					{
					   sha+=(ysegment[i].e-ysegment[i].s);
					   ysegment[i].e=ysegment[i-1].e;
					}
					else sha+=(ysegment[i-1].e-ysegment[i-1].s);
			    	ysegment[i-1].pos=0;
				    ysegment[i-1].s=0;
				    ysegment[i-1].e=0;
				 }
			     else 
				 {
			    	if(ysegment[i].s<ysegment[i-1].e)
					{				    	
			    	    if(ysegment[i].e<ysegment[i-1].e)
						{
                           sha+=(ysegment[i].e-ysegment[i].s);
					       ysegment[i].e=ysegment[i-1].e;
						}
						else sha+=(ysegment[i-1].e-ysegment[i].s);
						ysegment[i].s=ysegment[i-1].s;
				        ysegment[i-1].pos=0;
				        ysegment[i-1].s=0;
				        ysegment[i-1].e=0;
					}
				 }
			  }
              for(i=1;i<n3;i++) 
			  {
		         if(r_x[i].pos==r_x[i-1].pos)
			     if(r_x[i].s==r_x[i-1].s)
				 {
				    if(r_x[i].e<r_x[i-1].e)
					{
					    sha+=(r_x[i].e-r_x[i].s);
						r_x[i].e=r_x[i-1].e;
					}
					else sha+=(r_x[i-1].e-r_x[i-1].s);
				    r_x[i-1].pos=0;
				    r_x[i-1].s=0;
				    r_x[i-1].e=0;
				 }
			     else 
				 {
				    if(r_x[i].s<r_x[i-1].e)
					{					   
				       if(r_x[i].e<r_x[i-1].e)
					   {
						 sha+=(r_x[i].e-r_x[i].s);
					     r_x[i].e=r_x[i-1].e;
					   }
					   else sha+=(r_x[i-1].e-r_x[i].s);
					   r_x[i].s=r_x[i-1].s;
				       r_x[i-1].pos=0;
				       r_x[i-1].s=0;
				       r_x[i-1].e=0;
					}
				 }
			  }
              for(i=1;i<n4;i++) 
			  {
		          if(r_y[i].pos==r_y[i-1].pos)
			      if(r_y[i].s==r_y[i-1].s)
				  {
				     if(r_y[i].e<r_y[i-1].e)
					 {
                       sha+=(r_y[i].e-r_y[i].s);
					   r_y[i].e=r_y[i-1].e;
					 }
					 else sha+=(r_y[i-1].e-r_y[i-1].s);
				     r_y[i-1].pos=0;
				     r_y[i-1].s=0;
				     r_y[i-1].e=0;
				  }
			      else 
				  {
				     if(r_y[i].s<r_y[i-1].e)
					 {					   
				       if(r_y[i].e<r_y[i-1].e)
					   {
						 sha+=(r_y[i].e-r_y[i].s);
				  	     r_y[i].e=r_y[i-1].e;
					   }
					   else sha+=(r_y[i-1].e-r_y[i].s);
					   r_y[i].s=r_y[i-1].s;
			    	   r_y[i-1].pos=0;
			           r_y[i-1].s=0;
				       r_y[i-1].e=0;
					 }
				  }
			  }
			  length=0;
              for(i=0;i<n1;i++)
	            length+=(xsegment[i].e-xsegment[i].s);
	          for(i=0;i<n2;i++)
	            length+=(ysegment[i].e-ysegment[i].s);
	          for(i=0;i<n3;i++)
	            length+=(r_x[i].e-r_x[i].s);
	          for(i=0;i<n4;i++)
	            length+=(r_y[i].e-r_y[i].s);
//			  if(a==0&&b==1&&curt==73)	{		 
//				  printf("%d %d %d %d\n",n21,n22,n23,n24);
//			  printf("hor:\n");
//		      for(i=0;i<n21;i++)
//				  printf("%.0lf %.0lf %.0lf\n",xsegment[i].pos,xsegment[i].s,xsegment[i].e);
//            printf("ver:\n");
//		      for(i=0;i<n22;i++)
//				  printf("%.0lf %.0lf %.0lf\n",ysegment[i].pos,ysegment[i].s,ysegment[i].e);
//			  printf("45:\n");
//		      for(i=0;i<n23;i++)
//				  printf("%.0lf %.0lf %.0lf\n",r_x[i].pos,r_x[i].s,r_x[i].e);
//			  printf("135:\n");
//		      for(i=0;i<n24;i++)
//				  printf("%.0lf %.0lf %.0lf\n",r_y[i].pos,r_y[i].s,r_y[i].e);
//			  printf("sha:%.0lf\nlength:%.0lf\n",sha,length);  
//			}  
              if(length<opt_str[curt].ll)
			  {
				  opt_str[curt].ll=length;
                  opt_str[curt].choice[0]=a;
				  opt_str[curt].choice[1]=b;
				  opt_str[curt].shared_value=sha;
			  }
		   }
	   }
	}
	else if(terminal[curt].degree==3)
	{
       p1=terminal[curt].edge_pos[0]; 
	   p2=terminal[curt].edge_pos[1];
	   p3=terminal[curt].edge_pos[2];
	   i1=edge[p1].index; 
	   i2=edge[p2].index;
	   i3=edge[p3].index;
	   for(a=0;a<4;a++)
	   {
		   if(records1[i1].c[a]!=0) continue;
		   for(b=0;b<4;b++)
		   {
			  if(records1[i2].c[b]!=0) continue;
			   for(c=0;c<4;c++)
			   {
                  if(records1[i3].c[c]!=0) continue;
                  n1=0;n2=0;n3=0;n4=0;
                  if(records2[i1][a].mark[0]==true) 
				  {
                     xsegment[n1].pos=records2[i1][a].posh;
			         xsegment[n1].s=records2[i1][a].sh;
			         xsegment[n1++].e=records2[i1][a].eh;
				  }
		          if(records2[i1][a].mark[1]==true) 
				  {
                     ysegment[n2].pos=records2[i1][a].posv;
			         ysegment[n2].s=records2[i1][a].sv;
			         ysegment[n2++].e=records2[i1][a].ev;
				  }
		          if(records2[i1][a].mark[2]==true)
				  {
                     r_x[n3].pos=records2[i1][a].pos45;
			         r_x[n3].s=records2[i1][a].s45;
			         r_x[n3++].e=records2[i1][a].e45;
				  }
		          if(records2[i1][a].mark[3]==true) 
				  {
                     r_y[n4].pos=records2[i1][a].pos135;
			         r_y[n4].s=records2[i1][a].s135;
			         r_y[n4++].e=records2[i1][a].e135;
				  }
			      if(records2[i2][b].mark[0]==true) 
				  {
                    xsegment[n1].pos=records2[i2][b].posh;
			        xsegment[n1].s=records2[i2][b].sh;
			        xsegment[n1++].e=records2[i2][b].eh;
				  }
		          if(records2[i2][b].mark[1]==true) 
				  {
                    ysegment[n2].pos=records2[i2][b].posv;
			        ysegment[n2].s=records2[i2][b].sv;
			        ysegment[n2++].e=records2[i2][b].ev;
				  } 
		          if(records2[i2][b].mark[2]==true) 
				  { 
                    r_x[n3].pos=records2[i2][b].pos45;
			        r_x[n3].s=records2[i2][b].s45;
			        r_x[n3++].e=records2[i2][b].e45;
				  }
		          if(records2[i2][b].mark[3]==true)
				  { 
                    r_y[n4].pos=records2[i2][b].pos135;
			        r_y[n4].s=records2[i2][b].s135;
			        r_y[n4++].e=records2[i2][b].e135;
				  }
			      if(records2[i3][c].mark[0]==true) 
				  {
                    xsegment[n1].pos=records2[i3][c].posh;
			        xsegment[n1].s=records2[i3][c].sh;
			        xsegment[n1++].e=records2[i3][c].eh;
				  }
		          if(records2[i3][c].mark[1]==true) 
				  { 
                     ysegment[n2].pos=records2[i3][c].posv;
			         ysegment[n2].s=records2[i3][c].sv;
			         ysegment[n2++].e=records2[i3][c].ev;
				  }
		          if(records2[i3][c].mark[2]==true) 
				  { 
                     r_x[n3].pos=records2[i3][c].pos45;
			         r_x[n3].s=records2[i3][c].s45;
			         r_x[n3++].e=records2[i3][c].e45;
				  }
		          if(records2[i3][c].mark[3]==true)
				  { 
                     r_y[n4].pos=records2[i3][c].pos135;
			         r_y[n4].s=records2[i3][c].s135;
			         r_y[n4++].e=records2[i3][c].e135;
				  }
                  sort(xsegment,xsegment+n1,con);  
	              sort(ysegment,ysegment+n2,con);
	              sort(r_x,r_x+n3,con);
	              sort(r_y,r_y+n4,con);
			      sha=0;
			      for(i=1;i<n1;i++)
				  {
		              if(xsegment[i].pos==xsegment[i-1].pos)
			          if(xsegment[i].s==xsegment[i-1].s)
					  {
				         if(xsegment[i].e<xsegment[i-1].e)
						 {
						    sha+=(xsegment[i].e-xsegment[i].s);
						    xsegment[i].e=xsegment[i-1].e;
						 }
					     else sha+=(xsegment[i-1].e-xsegment[i-1].s);
				         xsegment[i-1].pos=0;
				         xsegment[i-1].s=0;
				         xsegment[i-1].e=0;
					  }
			          else 
					  {
				         if(xsegment[i].s<xsegment[i-1].e)
						 {				        
			   	            if(xsegment[i].e<xsegment[i-1].e)
							{
				  	          sha+=(xsegment[i].e-xsegment[i].s);
						      xsegment[i].e=xsegment[i-1].e;
							}
						    else sha+=(xsegment[i-1].e-xsegment[i].s);
						    xsegment[i].s=xsegment[i-1].s;
				            xsegment[i-1].pos=0;
			 	            xsegment[i-1].s=0;
				            xsegment[i-1].e=0;
						 }
					  }
				  }
			      for(i=1;i<n2;i++) 
				  {
		              if(ysegment[i].pos==ysegment[i-1].pos)
			          if(ysegment[i].s==ysegment[i-1].s)
					  {
				        if(ysegment[i].e<ysegment[i-1].e)
						{
					       sha+=(ysegment[i].e-ysegment[i].s);
					       ysegment[i].e=ysegment[i-1].e;
						}
					    else sha+=(ysegment[i-1].e-ysegment[i-1].s);
			    	    ysegment[i-1].pos=0;
				        ysegment[i-1].s=0;
				        ysegment[i-1].e=0;
					  }
			          else 
					  {
			        	if(ysegment[i].s<ysegment[i-1].e)
						{				    	
			    	       if(ysegment[i].e<ysegment[i-1].e)
						   {
                              sha+=(ysegment[i].e-ysegment[i].s);
					          ysegment[i].e=ysegment[i-1].e;
						   }
						   else sha+=(ysegment[i-1].e-ysegment[i].s);
						   ysegment[i].s=ysegment[i-1].s;
				           ysegment[i-1].pos=0;
				           ysegment[i-1].s=0;
				           ysegment[i-1].e=0;
						}
					  }
				  }
                  for(i=1;i<n3;i++) 
				  {
		             if(r_x[i].pos==r_x[i-1].pos)
			         if(r_x[i].s==r_x[i-1].s)
					 { 
				        if(r_x[i].e<r_x[i-1].e)
						{
					      sha+=(r_x[i].e-r_x[i].s);
					      r_x[i].e=r_x[i-1].e;
						}
					    else sha+=(r_x[i-1].e-r_x[i-1].s);
				        r_x[i-1].pos=0;
				        r_x[i-1].s=0;
				        r_x[i-1].e=0;
					 }
			         else 
					 {
				        if(r_x[i].s<r_x[i-1].e)
						{					   
				           if(r_x[i].e<r_x[i-1].e)
						   {
						     sha+=(r_x[i].e-r_x[i].s);
					         r_x[i].e=r_x[i-1].e;
						   }
					     else sha+=(r_x[i-1].e-r_x[i].s);
					     r_x[i].s=r_x[i-1].s;
				         r_x[i-1].pos=0;
				         r_x[i-1].s=0;
				         r_x[i-1].e=0;
						}
					 }
				  }
                  for(i=1;i<n4;i++)
				  {
		             if(r_y[i].pos==r_y[i-1].pos)
			         if(r_y[i].s==r_y[i-1].s)
					 {
				        if(r_y[i].e<r_y[i-1].e)
						{
                           sha+=(r_y[i].e-r_y[i].s);
					       r_y[i].e=r_y[i-1].e;
						}
					    else sha+=(r_y[i-1].e-r_y[i-1].s);
				        r_y[i-1].pos=0;
				        r_y[i-1].s=0;
				        r_y[i-1].e=0;
					 }
			         else 
					 {
				        if(r_y[i].s<r_y[i-1].e)
						{					   
				           if(r_y[i].e<r_y[i-1].e)
						   {
						     sha+=(r_y[i].e-r_y[i].s);
				  	         r_y[i].e=r_y[i-1].e;
						   }
					     else sha+=(r_y[i-1].e-r_y[i].s);
					     r_y[i].s=r_y[i-1].s;
			    	     r_y[i-1].pos=0;
			             r_y[i-1].s=0;
				         r_y[i-1].e=0;
						}
					 }
				  }
			      length=0;
                  for(i=0;i<n1;i++)
	                length+=(xsegment[i].e-xsegment[i].s);
	              for(i=0;i<n2;i++)
	                length+=(ysegment[i].e-ysegment[i].s);
	              for(i=0;i<n3;i++)
	                length+=(r_x[i].e-r_x[i].s);
	              for(i=0;i<n4;i++)
	                length+=(r_y[i].e-r_y[i].s);
                  if(length<opt_str[curt].ll)
				  {
				     opt_str[curt].ll=length;
                     opt_str[curt].choice[0]=a;
				     opt_str[curt].choice[1]=b;
					 opt_str[curt].choice[2]=c;
				     opt_str[curt].shared_value=sha;
				  }
			   }
		   }
	   }
	}
	else 
	{
       p1=terminal[curt].edge_pos[0]; 
	   p2=terminal[curt].edge_pos[1];
	   p3=terminal[curt].edge_pos[2];
	   p4=terminal[curt].edge_pos[3];
	   i1=edge[p1].index; 
	   i2=edge[p2].index;
	   i3=edge[p3].index;
	   i4=edge[p4].index;
	   for(a=0;a<4;a++)
	   {
		   if(records1[i1].c[a]!=0) continue;
		   for(b=0;b<4;b++)
		   {
			  if(records1[i2].c[b]!=0) continue;
			   for(c=0;c<4;c++)
			   {
				  if(records1[i3].c[c]!=0) continue;
				   for(d=0;d<4;d++)
				   {
                      if(records1[i4].c[d]!=0) continue;
                       n1=0;n2=0;n3=0;n4=0;
                      if(records2[i1][a].mark[0]==true) 
					  {
                        xsegment[n1].pos=records2[i1][a].posh;
			            xsegment[n1].s=records2[i1][a].sh;
			            xsegment[n1++].e=records2[i1][a].eh;
					  }
		              if(records2[i1][a].mark[1]==true) 
					  {
                        ysegment[n2].pos=records2[i1][a].posv;
			            ysegment[n2].s=records2[i1][a].sv;
			            ysegment[n2++].e=records2[i1][a].ev;
					  }
		              if(records2[i1][a].mark[2]==true) 
					  { 
                        r_x[n3].pos=records2[i1][a].pos45;
			            r_x[n3].s=records2[i1][a].s45;
			            r_x[n3++].e=records2[i1][a].e45;
					  }  
		              if(records2[i1][a].mark[3]==true) 
					  {
                        r_y[n4].pos=records2[i1][a].pos135;
			            r_y[n4].s=records2[i1][a].s135;
			            r_y[n4++].e=records2[i1][a].e135;
					  }
			          if(records2[i2][b].mark[0]==true) 
					  { 
                        xsegment[n1].pos=records2[i2][b].posh;
			            xsegment[n1].s=records2[i2][b].sh;
			            xsegment[n1++].e=records2[i2][b].eh;
					  }
		              if(records2[i2][b].mark[1]==true) 
					  {
                        ysegment[n2].pos=records2[i2][b].posv;
			            ysegment[n2].s=records2[i2][b].sv;
			            ysegment[n2++].e=records2[i2][b].ev;
					  } 
		              if(records2[i2][b].mark[2]==true)
					  { 
                        r_x[n3].pos=records2[i2][b].pos45;
			            r_x[n3].s=records2[i2][b].s45;
			            r_x[n3++].e=records2[i2][b].e45;
					  }
		              if(records2[i2][b].mark[3]==true) 
					  { 
                        r_y[n4].pos=records2[i2][b].pos135;
			            r_y[n4].s=records2[i2][b].s135;
			            r_y[n4++].e=records2[i2][b].e135;
					  }
			          if(records2[i3][c].mark[0]==true) 
					  {
                        xsegment[n1].pos=records2[i3][c].posh;
			            xsegment[n1].s=records2[i3][c].sh;
			            xsegment[n1++].e=records2[i3][c].eh;
					  }
		              if(records2[i3][c].mark[1]==true) 
					  { 
                        ysegment[n2].pos=records2[i3][c].posv;
			            ysegment[n2].s=records2[i3][c].sv;
			            ysegment[n2++].e=records2[i3][c].ev;
					  }
		             if(records2[i3][c].mark[2]==true) 
					 { 
                        r_x[n3].pos=records2[i3][c].pos45;
			            r_x[n3].s=records2[i3][c].s45;
			            r_x[n3++].e=records2[i3][c].e45;
					 }
		             if(records2[i3][c].mark[3]==true) 
					 { 
                        r_y[n4].pos=records2[i3][c].pos135;
			            r_y[n4].s=records2[i3][c].s135;
			            r_y[n4++].e=records2[i3][c].e135;
					 }
			          if(records2[i4][d].mark[0]==true) 
					  {
                        xsegment[n1].pos=records2[i4][d].posh;
			            xsegment[n1].s=records2[i4][d].sh;
			            xsegment[n1++].e=records2[i4][d].eh;
					  }
		             if(records2[i4][d].mark[1]==true) 
					 { 
                        ysegment[n2].pos=records2[i4][d].posv;
			            ysegment[n2].s=records2[i4][d].sv;
			            ysegment[n2++].e=records2[i4][d].ev;
					 }
		             if(records2[i4][d].mark[2]==true) 
					 { 
                        r_x[n3].pos=records2[i4][d].pos45;
			            r_x[n3].s=records2[i4][d].s45;
			            r_x[n3++].e=records2[i4][d].e45;
					 }
		             if(records2[i4][d].mark[3]==true) 
					 { 
                        r_y[n4].pos=records2[i4][d].pos135;
			            r_y[n4].s=records2[i4][d].s135;
			            r_y[n4++].e=records2[i4][d].e135;
					 }
                     sort(xsegment,xsegment+n1,con);  
	                 sort(ysegment,ysegment+n2,con);
	                 sort(r_x,r_x+n3,con);
	                 sort(r_y,r_y+n4,con);
			         sha=0;
			         for(i=1;i<n1;i++) 
					 {
		                if(xsegment[i].pos==xsegment[i-1].pos)
			            if(xsegment[i].s==xsegment[i-1].s)
						{
				           if(xsegment[i].e<xsegment[i-1].e)
						   {
						    sha+=(xsegment[i].e-xsegment[i].s);
						    xsegment[i].e=xsegment[i-1].e;
						   }
					       else sha+=(xsegment[i-1].e-xsegment[i-1].s);
				            xsegment[i-1].pos=0;
				            xsegment[i-1].s=0;
				           xsegment[i-1].e=0;
						}
			            else 
						{
				           if(xsegment[i].s<xsegment[i-1].e)
						   {				        
			   	            if(xsegment[i].e<xsegment[i-1].e)
							{
				  	          sha+=(xsegment[i].e-xsegment[i].s);
						      xsegment[i].e=xsegment[i-1].e;
							}
						    else sha+=(xsegment[i-1].e-xsegment[i].s);
						    xsegment[i].s=xsegment[i-1].s;
				            xsegment[i-1].pos=0;
			 	            xsegment[i-1].s=0;
				            xsegment[i-1].e=0;
						   }
						}
					 }
			         for(i=1;i<n2;i++) 
					 { 
		                if(ysegment[i].pos==ysegment[i-1].pos)
			            if(ysegment[i].s==ysegment[i-1].s)
						{
				          if(ysegment[i].e<ysegment[i-1].e)
						  {
					       sha+=(ysegment[i].e-ysegment[i].s);
					       ysegment[i].e=ysegment[i-1].e;
						  }
					      else sha+=(ysegment[i-1].e-ysegment[i-1].s);
			    	      ysegment[i-1].pos=0;
				          ysegment[i-1].s=0;
				          ysegment[i-1].e=0;
						}
			            else 
						{
			        	  if(ysegment[i].s<ysegment[i-1].e)
						  {				    	
			    	       if(ysegment[i].e<ysegment[i-1].e)
						   {
                              sha+=(ysegment[i].e-ysegment[i].s);
					          ysegment[i].e=ysegment[i-1].e;
						   }
						   else sha+=(ysegment[i-1].e-ysegment[i].s);
						   ysegment[i].s=ysegment[i-1].s;
				           ysegment[i-1].pos=0;
				           ysegment[i-1].s=0;
				           ysegment[i-1].e=0;
						  }
						}
					 }
                     for(i=1;i<n3;i++) 
					 {
		                if(r_x[i].pos==r_x[i-1].pos)
			            if(r_x[i].s==r_x[i-1].s)
						{ 
				          if(r_x[i].e<r_x[i-1].e)
						  {
					       sha+=(r_x[i].e-r_x[i].s);
					       r_x[i].e=r_x[i-1].e;
						  }
					      else sha+=(r_x[i-1].e-r_x[i-1].s);
				          r_x[i-1].pos=0;
				          r_x[i-1].s=0;
				          r_x[i-1].e=0;
						}
			            else 
						{
				          if(r_x[i].s<r_x[i-1].e)
						  {					   
				            if(r_x[i].e<r_x[i-1].e)
							{
						      sha+=(r_x[i].e-r_x[i].s);
					          r_x[i].e=r_x[i-1].e;
							}
					       else sha+=(r_x[i-1].e-r_x[i].s);
					       r_x[i].s=r_x[i-1].s;
				           r_x[i-1].pos=0;
				           r_x[i-1].s=0;
				           r_x[i-1].e=0;
						  }
						} 
					 }
                     for(i=1;i<n4;i++) 
					 {
		                if(r_y[i].pos==r_y[i-1].pos)
			            if(r_y[i].s==r_y[i-1].s)
						{
				          if(r_y[i].e<r_y[i-1].e)
						  {
                           sha+=(r_y[i].e-r_y[i].s);
					       r_y[i].e=r_y[i-1].e;
						  }
					      else sha+=(r_y[i-1].e-r_y[i-1].s);
				          r_y[i-1].pos=0;
				          r_y[i-1].s=0;
				          r_y[i-1].e=0;
						}  
			            else 
						{ 
				          if(r_y[i].s<r_y[i-1].e)
						  {					   
				           if(r_y[i].e<r_y[i-1].e)
						   {
						     sha+=(r_y[i].e-r_y[i].s);
				  	         r_y[i].e=r_y[i-1].e;
						   }
					       else sha+=(r_y[i-1].e-r_y[i].s);
					       r_y[i].s=r_y[i-1].s;
			    	       r_y[i-1].pos=0;
			               r_y[i-1].s=0;
				           r_y[i-1].e=0;
						  }
						}
					 }
			         length=0;
                     for(i=0;i<n1;i++)
	                   length+=(xsegment[i].e-xsegment[i].s);
	                 for(i=0;i<n2;i++)
	                   length+=(ysegment[i].e-ysegment[i].s);
	                 for(i=0;i<n3;i++)
	                   length+=(r_x[i].e-r_x[i].s);
	                 for(i=0;i<n4;i++)
	                   length+=(r_y[i].e-r_y[i].s);
                     if(length<opt_str[curt].ll)
					 {
				       opt_str[curt].ll=length;
                       opt_str[curt].choice[0]=a;
				       opt_str[curt].choice[1]=b;
					   opt_str[curt].choice[2]=c;
					   opt_str[curt].choice[3]=d;
				       opt_str[curt].shared_value=sha;
					 }
				  }
			   }
		   }
		}
	}
}